#!/bin/bash

__SCRIPT_PATH="$0"

function __load_lib {
    __provisioning_dir=$(dirname "$(dirname "$__SCRIPT_PATH")")
    export __provisioning_dir

    # shellcheck disable=SC1090
    source "${__provisioning_dir}/script/lib"
}

function __run_test {
    local use_stdout_as_msg
    local test_command
    local test_file
    local error_msg
    local error_code
    local final_error_code
    use_stdout_as_msg="$1"
    test_command="$2"
    test_file="$3"
    final_error_code=0

    # shellcheck disable=SC2069
    if [ "$use_stdout_as_msg" == "yes" ]; then
        error_msg=$("$test_command" "$test_file" 2>&1)
        error_code=$?
    else
        error_msg=$("$test_command" "$test_file" 2>&1 > /dev/null)
        error_code=$?
    fi

    if [ $error_code -ne 0 ] || [ "$error_msg" != "" ]; then
        echo "${test_file}:"
        echo "$error_msg"
        echo ""
        final_error_code=$error_code
    fi

    return $final_error_code
}

function __test_yaml {
    local yaml_file
    local error_code
    local final_error_code
    final_error_code=0

    while read -r yaml_file; do
        __run_test no js-yaml "$yaml_file"
        error_code=$?
        [[ $error_code -ne 0 ]] && final_error_code=$error_code
    done < <( find "$__provisioning_dir" -type f \( -iname '*.yml' -o -iname '*.yaml' \) )
}

function __test_sh {
    local sh_file
    local error_code
    local final_error_code
    final_error_code=0

    while read -r sh_file; do
        __run_test yes shellcheck "$sh_file"
        error_code=$?
        [[ $error_code -ne 0 ]] && final_error_code=$error_code
    done < <( find "$__provisioning_dir/roles/bin/files" -type f )

    while read -r sh_file; do
        head -n1 < "$sh_file" | grep -q sh
        [ $? -ne 0 ] && continue

        __run_test yes shellcheck "$sh_file"
        error_code=$?
        [[ $error_code -ne 0 ]] && final_error_code=$error_code
    done < <( find "$__provisioning_dir/roles/git/files" -type f -name "git-*" )

    while read -r sh_file; do
        __run_test yes shellcheck "$sh_file"
        error_code=$?
        [[ $error_code -ne 0 ]] && final_error_code=$error_code
    done < <( find "$__provisioning_dir/script" -type f )

    while read -r sh_file; do
        [[ "${sh_file##*/}" == "customrc.sh" ]] && continue
        __run_test yes shellcheck "$sh_file"
        error_code=$?
        [[ $error_code -ne 0 ]] && final_error_code=$error_code
    done < <( find "$__provisioning_dir" -type f -iname '*.sh' )
}

function __run_tests {
    ERROR_CODE=0
    __test_yaml || { ERROR_CODE=$?; }
    __test_sh || { ERROR_CODE=$?; }

    exit $ERROR_CODE
}

__load_lib
__run_tests
