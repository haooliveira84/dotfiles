#!/bin/bash

__REDHAT_NO_PASSWD_SUDO='%wheel   ALL=(ALL)   NOPASSWD: ALL'

function __install_deps_redhat() {
    if [ "$(which dnf 2> /dev/null)" != "" ]; then
        PKG_MGR_CMD=dnf
    else
        PKG_MGR_CMD=yum
    fi

    sudo $PKG_MGR_CMD install -y \
        ansible \
        python2-dnf
    sudo grep -qi "$__REDHAT_NO_PASSWD_SUDO" /etc/sudoers || \
        echo "$__REDHAT_NO_PASSWD_SUDO" | \
        sudo tee -a /etc/sudoers > /dev/null
}

function __install_deps {
    __install_deps_redhat
}

function __checkout_master {
    local provisioning_dir
    provisioning_dir="$1"

    pushd "$provisioning_dir" > /dev/null
    git remote | grep -q origin
    if [ $? -ne 0 ]; then
        git remote add origin git@github.com:rca0/dotfiles.git
    else
        if [[ "$(git remote get-url origin)" !=  "git@github.com:rca0/dotfiles.git" ]]; then
            git remote set-url origin git@github.com:rca0/dotfiles.git
        fi
    fi
    git checkout master
    popd > /dev/null
}

function __check_git_update {
    local provisioning_dir
    local old_ref
    local new_ref

    provisioning_dir="$1"

    pushd "$provisioning_dir" > /dev/null
    old_ref="$(git rev-parse HEAD)"
    git pull --rebase --prune
    new_ref="$(git rev-parse HEAD)"
    popd > /dev/null

    [[ "$old_ref" != "$new_ref" ]] && return
    return 1
}

function __get_file_dir {
    local file_path
    local old_path

    file_path="$1"
    old_path="$(pwd)"

    builtin cd "$(dirname "$file_path")" && pwd
    builtin cd "$old_path"
}

function __get_provisioning_config {
    local provisioning_dir
    local provisioning_config_file
    local provisioning_config

    provisioning_dir="$1"
    provisioning_config_file=".local"
    [[ ! -e "${provisioning_dir}/${provisioning_config_file}" ]] && \
        echo "default" && return

    provisioning_config="$(tr -d '[:space:]' < "${provisioning_dir}/${provisioning_config_file}")"
    echo "$provisioning_config"
}

function __do_provisioning {
    local provisioning_dir
    local provisioning_config
    local confirm_default
    provisioning_dir="$1"
    provisioning_config="$2"
    confirm_default="$3"

    if [ "$provisioning_config" == "default" -a "$confirm_default" != "no" ]; then
        echo -n "Run with the [default] configuration? (yes|no): "
        read confirm_default
        if [ "$confirm_default" != "yes" ]; then
            echo "exiting"
            exit
        fi
    fi

    pushd "${provisioning_dir}" > /dev/null
    if [ "$VIRTUAL_ENV" != "" ]; then
        source "$(which deactivate)"
    fi

    ansible-playbook \
        --become \
        --become-user="$USER" \
        "./playbooks/${provisioning_config}.yml"
}

function __get_info {
    local provisioning_dir
    local provisioning_config
    local confirm
    provisioning_dir="$1"

    echo -n "Enter provisioning config name (leave empty to use defaults): "
    read provisioning_config
    provisioning_config="$(echo -n "${provisioning_config}" | tr -d '[:space:]')"

    [[ "$provisioning_config" == "" ]] && provisioning_config=default

    if [ -e "${provisioning_dir}/playbooks/${provisioning_config}.yml" ]; then
        echo -n "Is this config correct? [${provisioning_config}] (yes|no): "
        read confirm
        [[ "$confirm" != "yes" ]] && return
        echo "${provisioning_config}" > "${provisioning_dir}/.local"
    else
        echo "Config [${provisioning_config}] does not exist!"
        exit 1
    fi

    export PROVISIONING_CONFIG="${provisioning_config}"
}
